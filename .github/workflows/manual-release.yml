name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.2)'
        required: true
        type: string
      test_pypi_first:
        description: 'Upload to Test PyPI first'
        required: true
        type: boolean
        default: true

jobs:
  validate-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.validate.outputs.version }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate version format
      id: validate
      run: |
        VERSION="${{ inputs.version }}"
        if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Error: Version must be in format X.Y.Z"
          exit 1
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Check if tag exists
      run: |
        if git ls-remote --tags origin | grep -q "refs/tags/${{ inputs.version }}"; then
          echo "Error: Tag ${{ inputs.version }} already exists"
          exit 1
        fi
    
    - name: Check pyproject.toml version
      run: |
        PYPROJECT_VERSION=$(grep -E '^version = ' pyproject.toml | cut -d'"' -f2)
        if [[ "$PYPROJECT_VERSION" != "${{ inputs.version }}" ]]; then
          echo "Error: pyproject.toml version ($PYPROJECT_VERSION) doesn't match input version (${{ inputs.version }})"
          echo "Please update pyproject.toml first"
          exit 1
        fi

  build:
    needs: validate-version
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package with twine
      run: twine check dist/*
    
    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  test-pypi:
    if: inputs.test_pypi_first
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: testpypi-manual
    
    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    
    - name: Publish to Test PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        pip install twine
        twine upload --repository testpypi dist/* --skip-existing

  production-pypi:
    needs: [build, test-pypi]
    if: always() && needs.build.result == 'success' && (needs.test-pypi.result == 'success' || needs.test-pypi.result == 'skipped')
    runs-on: ubuntu-latest
    environment:
      name: pypi-manual
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        pip install twine
        twine upload dist/*
    
    - name: Create and push tag
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git tag -a "${{ inputs.version }}" -m "Release version ${{ inputs.version }}"
        git push origin "${{ inputs.version }}"
    
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        gh release create "${{ inputs.version }}" \
          --title "Release v${{ inputs.version }}" \
          --notes "Release version ${{ inputs.version }}
        
        ## Installation
        
        Install from PyPI:
        \`\`\`bash
        pip install antlr-v4-linter==${{ inputs.version }}
        \`\`\`
        
        Or with uv:
        \`\`\`bash
        uv add antlr-v4-linter==${{ inputs.version }}
        \`\`\`
        
        ## Links
        
        - [PyPI Package](https://pypi.org/project/antlr-v4-linter/${{ inputs.version }}/)
        - [Test PyPI Package](https://test.pypi.org/project/antlr-v4-linter/${{ inputs.version }}/)" \
          dist/**